/* Copyright (C) Nemirtingas
 * This file is part of utils.
 *
 * utils is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * utils is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with utils.  If not, see <https://www.gnu.org/licenses/>
 */

namespace utils {
    inline std::string ltrim(std::string const& _str)
    {
        std::string str(_str);
        str.erase(str.begin(), std::find_if(str.begin(), str.end(), [](const char& c)
        {
            return !std::isspace(c);
        }));
        return str;
    }

    inline std::string rtrim(std::string const& _str)
    {
        std::string str(_str);
        str.erase(std::find_if(str.rbegin(), str.rend(), [](const char& c)
        {
            return !std::isspace(c);
        }).base(), str.end());
        return str;
    }

    inline std::string trim(std::string const& _str)
    {
        std::string str(_str);
        return rtrim(ltrim(str));
    }

    inline std::string to_lower(const char* _str)
    {
        std::string str;
        std::transform(_str, _str + std::strlen(_str), std::back_inserter(str), [](unsigned char c)
        {
            return std::tolower(c);
        });

        return str;
    }

    inline std::string to_lower(std::string const& _str)
    {
        std::string str(_str);
        std::transform(str.begin(), str.end(), str.begin(), [](unsigned char c)
        {
            return std::tolower(c);
        });

        return str;
    }

    inline std::string to_upper(const char* _str)
    {
        std::string str;
        std::transform(_str, _str + std::strlen(_str), std::back_inserter(str), [](unsigned char c)
        {
            return std::toupper(c);
        });

        return str;
    }

    inline std::string to_upper(std::string const& _str)
    {
        std::string str(_str);
        std::transform(str.begin(), str.end(), str.begin(), [](unsigned char c)
        {
            return std::toupper(c);
        });

        return str;
    }
}